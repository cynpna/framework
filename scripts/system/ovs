#!/usr/bin/env bash
# Copyright (C) 2016 iNuron NV
#
# This file is part of Open vStorage Open Source Edition (OSE),
# as available from
#
#      http://www.openvstorage.org and
#      http://www.openvstorage.com.
#
# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU Affero General Public License v3 (GNU AGPLv3)
# as published by the Free Software Foundation, in version 3 as it comes
# in the LICENSE.txt file of the Open vStorage OSE distribution.
#
# Open vStorage is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY of any kind.

cd /opt/OpenvStorage
export PYTHONPATH="/opt/OpenvStorage:/opt/OpenvStorage/webapps/api:${PYTHONPATH}"
export DISPLAY=:0
export OVS_LOGTYPE_OVERRIDE=file

function show_help {
    echo "Open vStorage CLI launcher"
    echo "--------------------------"
    echo "Usage:"
    echo "  * Miscellaneous options:"
    echo "    - ovs                             Launch Open vStorage shell (ipython)"
    echo "    - ovs help                        Show this help section"
    echo "    - ovs collect logs                Collect all Open vStorage logs to a tarball (for support purposes)"
    echo ""
    echo "  * Setup options:"
    echo "    - ovs setup                       Launch Open vStorage setup and autodetect required node role (master/extra)"
    echo "    - ovs setup master                Launch Open vStorage setup and install master node"
    echo "    - ovs setup extra                 Launch Open vStorage setup and install extra node"
    echo "    - ovs setup promote               Promote this node (extra -> master)"
    echo "    - ovs setup demote                Demote this node (master -> extra)"
    echo ""
    echo "  * Update options:"
    echo "    - ovs update framework            Update framework components on all nodes in cluster"
    echo "    - ovs update volumedriver         Update volumedriver components on all nodes in cluster"
    echo ""
    echo "  * Remove options:"
    echo "    - ovs remove node <ip>            Remove node from cluster"
    echo ""
    echo "  * Monitor options:"
    echo "    - ovs monitor services            Watch Open vStorage services"
    echo "    - ovs monitor heartbeat           Send an internal heartbeat"
    echo ""
    echo "  * Services options:"
    echo "    - ovs stop framework [ip|all]     Stop Open vStorage Framework services on this node, on all nodes, or on the given ip"
    echo "    - ovs start framework [ip|all]    Start Open vStorage Framework services on this node, on all nodes, or on the given ip"
    echo ""
    echo "  * Unit tests:"
    echo "    - ovs unittest                    Execute all unittests"
    echo "    - ovs unittest list               List all unittests"
    echo "    - ovs unittest [filepath]         Run the unittests in <filepath>"
    echo ""
    echo "  * Configuration editing:"
    echo "    - ovs config edit some/key        Opens the contents of 'some/key' in your EDITOR, and updates it after editing"
    echo "    - ovs config list [some]          Lists all keys [under 'some']"
    echo "    - ovs config get some/key         Prints the contents of 'some/key'"
    echo ""
    echo "  * Custom Open vStorage modules:"
    echo "    - ovs <modulename> <arguments>    Execute a custom Open vStorage module in /opt/OpenvStorage/scripts/"
    echo ""
}

if [ "$1" = "help" ] ; then
    show_help
elif [ "$1" = "setup" ] ; then
    if [ "$#" -lt 2 ] ; then
        python -c "from ovs.lib.setup import SetupController; SetupController.setup_node()"
    elif [ "$2" = "master" ] || [ "$2" = "extra" ] ; then
        python -c "from ovs.lib.setup import SetupController; SetupController.setup_node(node_type='$2')"
    elif [ "$2" = "promote" ] ; then
        python -c "from ovs.lib.setup import SetupController; SetupController.promote_or_demote_node('promote')"
    elif [ "$2" = "demote" ] ; then
        python -c "from ovs.lib.setup import SetupController; SetupController.promote_or_demote_node('demote', '$3')"
    else
        show_help
    fi
elif [ "$1" = "update" ] ; then
    if [ "$2" = "framework" ] ; then
        echo 'date >> /var/log/ovs/update.log; python -c "from ovs.lib.update import UpdateController; UpdateController.update_framework()" &>> /var/log/ovs/update.log; echo "done" >> /var/log/ovs/update.log' > /tmp/update
        at -f /tmp/update now
        rm /tmp/update
    elif [ "$2" = "volumedriver" ] ; then
        echo 'date >> /var/log/ovs/update.log; python -c "from ovs.lib.update import UpdateController; UpdateController.update_volumedriver()" &>> /var/log/ovs/update.log; echo "done" >> /var/log/ovs/update.log' > /tmp/update
        at -f /tmp/update now
        rm /tmp/update
    else
        show_help
    fi
elif [ "$1" = "remove" ] ; then
    if [ "$2" = "node" ] ; then
        python -c "from ovs.lib.setup import SetupController; SetupController.remove_node('$3', '$4')"
    else
        show_help
    fi
elif [ "$1" = "monitor" ] ; then
    if [ "$2" = "services" ] ; then
        service_manager=`cat /proc/1/comm`
        if test "$service_manager" = "systemd"
        then
            watch -n 1 'echo "OVS running processes:";echo; systemctl -l | grep ovs- | grep "loaded active" | sort; echo; echo "OVS non-running processes:"; systemctl -a | grep ovs- | grep "loaded inactive" | sort; echo; echo "OVS disabled services:"; systemctl list-unit-files | grep ovs- | grep disabled | sort'
        else
            watch -n 1 'echo "\nOVS running processes:\n";initctl list | grep ovs | grep start/running | sort;echo "\nOVS non-running processes:\n";initctl list | grep ovs | grep -v start/running | sort'
        fi
    elif [ "$2" = "heartbeat" ] ; then
        python /opt/OpenvStorage/ovs/extensions/generic/heartbeat.py
    else
        show_help
    fi
elif [ "$1" = "stop" ] || [ "$1" = "start" ] ; then
    if [ "$2" = "framework" ] ; then
        if [ "$#" -eq 2 ] ; then
            python -c """
from ovs.extensions.generic.system import System
from ovs.extensions.generic.sshclient import SSHClient
from ovs.extensions.services.service import ServiceManager
print '{0}...'.format('Starting' if '$1' == 'start' else 'Stopping')
ServiceManager.$1_service('watcher-framework', SSHClient(System.get_my_storagerouter(), username='root'))
print 'Done'"""
        elif [ "$#" -eq 3 ] ; then
            if [ "$3" == "all" ] ; then
                python -c """
from ovs.dal.lists.storagerouterlist import StorageRouterList
from ovs.extensions.generic.sshclient import SSHClient
from ovs.extensions.services.service import ServiceManager
for storagerouter in StorageRouterList.get_storagerouters():
    print '{0} on {1}...'.format('Starting' if '$1' == 'start' else 'Stopping', storagerouter.name)
    ServiceManager.$1_service('watcher-framework', SSHClient(storagerouter, username='root'))
print 'Done'"""
            else
                python -c """
from ovs.dal.lists.storagerouterlist import StorageRouterList
from ovs.extensions.generic.sshclient import SSHClient
from ovs.extensions.services.service import ServiceManager
storagerouter = StorageRouterList.get_by_ip('$3')
if storagerouter is None:
    print 'Could not find StorageRouter with ip $3'
else:
    print '{0} on {1}...'.format('Starting' if '$1' == 'start' else 'Stopping', storagerouter.name)
    ServiceManager.$1_service('watcher-framework', SSHClient(storagerouter, username='root'))
    print 'Done'"""
            fi
        else
            show_help
        fi
    else
        show_help
    fi
elif [ "$1" = "collect" ] ; then
    if [ "$2" = "logs" ] ; then
        LOGFILE=/tmp/ovs-`hostname`-`date "+%Y%m%d%H%M%S"`-logs.tar
        rm -f ${LOGFILE}
        rm -f ${LOGFILE}.gz
        touch ${LOGFILE}
        tar uvf ${LOGFILE} /var/log/arakoon* > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/nginx* > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/ovs* > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/rabbitmq* > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/upstart* > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/*log > /dev/null 2>&1
        tar uvf ${LOGFILE} /var/log/dmesg* > /dev/null 2>&1
        gzip ${LOGFILE} > /dev/null
        echo ${LOGFILE}.gz
    else
        show_help
    fi
elif [ "$1" = "unittest" ] ; then
    if [ "$#" -eq 1 ]; then
        python -c "from ovs.lib.helpers.unittests import UnitTest; UnitTest.run_tests()"
    elif [ "$#" -ge 3 ]; then
        show_help
    elif [ "$2" = "list" ]; then
        python -c "from ovs.lib.helpers.unittests import UnitTest; UnitTest.list_tests(print_tests=True)"
    else
        if [[ "$2" == *.py ]]; then
            directory=$(dirname "$2")
            filename=$(basename "$2")
            filename="${filename%.*}"
            filename="$directory"/"$filename"
        else
            filename="$2"
        fi
        python -c "from ovs.lib.helpers.unittests import UnitTest; UnitTest.run_tests('$filename')"
    fi
elif [ "$1" = "config" ] ; then
    if [ "$2" = "edit" ] ; then
        if [ "$#" -eq 3 ] ; then
          TEMP="/tmp/$(basename $0).$$.$RANDOM.tmp"
          python -c """
from ovs.extensions.generic.configuration import Configuration
with open('$TEMP', 'w') as f:
    if Configuration.exists('$3', raw=True):
        f.write(Configuration.get('$3', raw=True))
    else:
        f.write('')
"""
          ${EDITOR:=nano} ${TEMP}
          python -c """
from ovs.extensions.generic.configuration import Configuration
with open('$TEMP', 'r') as f:
    Configuration.set('$3', f.read(), raw=True)
"""
          rm -f ${TEMP}
        else
            show_help
        fi
    elif [ "$2" = "list" ] ; then
        python -c """
from ovs.extensions.generic.configuration import Configuration
for entry in Configuration.list('$3'):
    print entry
"""
    elif [ "$2" = "get" ] ; then
        python -c """
from ovs.extensions.generic.configuration import Configuration;
if Configuration.exists('$3', raw=True):
    print Configuration.get('$3', raw=True)
"""
    else
        show_help
    fi
elif [ "$#" -ge 1 ] ; then
    module=${1}
    if [ -f /opt/OpenvStorage/scripts/${module}.sh ] ; then
        shift
        /opt/OpenvStorage/scripts/${module}.sh $@
    else
        show_help
    fi
else
    ipython
fi
